import random
from typing import Dict, List
import re

class ResponseGenerator:
    def __init__(self):
        self.response_templates = self.load_response_templates()
        self.educational_phrases = self.load_educational_phrases()
        
    def load_response_templates(self) -> Dict:
        """Cargar plantillas de respuesta por tipo de pregunta"""
        return {
            'definition': [
                "Te explico qu√© es {topic}: {content}",
                "El concepto de {topic} se refiere a: {content}",
                "{topic} se define como: {content}"
            ],
            'explanation': [
                "Te explico c√≥mo funciona {topic}: {content}",
                "Para entender {topic}, es importante saber que: {content}",
                "El proceso de {topic} funciona as√≠: {content}"
            ],
            'calculation': [
                "Para resolver este tipo de problema sobre {topic}: {content}",
                "Los pasos para calcular {topic} son: {content}",
                "Te ayudo con el c√°lculo de {topic}: {content}"
            ],
            'comparison': [
                "La diferencia entre estos conceptos de {topic} es: {content}",
                "Comparando estos elementos de {topic}: {content}",
                "Para distinguir entre estos conceptos de {topic}: {content}"
            ],
            'example': [
                "Aqu√≠ tienes un ejemplo de {topic}: {content}",
                "Para ilustrar {topic}, considera esto: {content}",
                "Un caso pr√°ctico de {topic} ser√≠a: {content}"
            ],
            'general': [
                "Sobre {topic}: {content}",
                "En relaci√≥n a {topic}: {content}",
                "Respecto a {topic}: {content}"
            ]
        }
    
    def load_educational_phrases(self) -> Dict:
        """Cargar frases educativas motivacionales"""
        return {
            'encouragement': [
                "¬°Excelente pregunta!",
                "Me alegra que preguntes sobre esto.",
                "Es muy bueno que tengas curiosidad por este tema.",
                "Esa es una pregunta muy inteligente."
            ],
            'learning_tips': [
                "üí° Consejo: Practica con ejercicios similares para reforzar este concepto.",
                "üìö Tip de estudio: Haz un resumen de los puntos clave.",
                "üéØ Recomendaci√≥n: Relaciona este tema con ejemplos de la vida real.",
                "‚ú® Sugerencia: Explica este concepto a alguien m√°s para consolidar tu aprendizaje."
            ],
            'follow_up': [
                "¬øTe gustar√≠a que profundice en alg√∫n aspecto espec√≠fico?",
                "¬øHay algo m√°s sobre este tema que te interese saber?",
                "¬øNecesitas ejemplos adicionales o ejercicios pr√°cticos?",
                "¬øTe qued√≥ claro o prefieres que lo explique de otra manera?"
            ]
        }
    
    def generate_response(self, original_question: str, processed_question: Dict, 
                         relevant_content: List[Dict]) -> Dict:
        """Generar respuesta completa basada en la pregunta y contenido relevante"""
        
        if not relevant_content:
            return self.generate_fallback_response(processed_question)
        
        # Seleccionar el contenido m√°s relevante
        best_match = relevant_content[0]
        subject = best_match['subject']
        topic = best_match['topic']
        content = best_match['content']
        confidence = best_match['similarity']
        
        # Seleccionar plantilla seg√∫n tipo de pregunta
        question_type = processed_question.get('question_type', 'general')
        templates = self.response_templates.get(question_type, self.response_templates['general'])
        template = random.choice(templates)
        
        # Generar respuesta principal
        main_response = template.format(topic=topic, content=content)
        
        # Agregar elementos educativos
        encouragement = random.choice(self.educational_phrases['encouragement'])
        learning_tip = random.choice(self.educational_phrases['learning_tips'])
        follow_up = random.choice(self.educational_phrases['follow_up'])
        
        # Construir respuesta completa
        full_response = f"{encouragement}\n\n{main_response}\n\n{learning_tip}\n\n{follow_up}"
        
        # Generar sugerencias relacionadas
        suggestions = self.generate_suggestions(subject, topic, relevant_content)
        
        # Generar recursos adicionales
        resources = self.generate_resources(subject, topic)
        
        return {
            'response': full_response,
            'subject': subject,
            'topic': topic,
            'confidence': confidence,
            'suggestions': suggestions,
            'resources': resources,
            'question_type': question_type
        }
    
    def generate_fallback_response(self, processed_question: Dict) -> Dict:
        """Generar respuesta cuando no se encuentra contenido relevante"""
        subject = processed_question.get('subject', 'general')
        
        fallback_responses = [
            "Disculpa, no tengo informaci√≥n espec√≠fica sobre esa consulta en mi base de conocimiento actual.",
            "Esa es una pregunta interesante, pero necesito m√°s informaci√≥n espec√≠fica para ayudarte mejor.",
            "No encuentro contenido espec√≠fico para tu pregunta, pero puedo ayudarte con temas relacionados.",
        ]
        
        response = random.choice(fallback_responses)
        
        # Sugerir temas relacionados si se detect√≥ una materia
        if subject != 'general':
            response += f"\n\n¬øTe interesa que te hable sobre otros temas de {subject}?"
        
        response += "\n\nüí° Consejo: Intenta reformular tu pregunta o ser m√°s espec√≠fico sobre el tema que te interesa."
        response += "\n\n¬øPuedes darme m√°s detalles sobre lo que necesitas saber?"
        
        return {
            'response': response,
            'subject': subject,
            'topic': 'consulta_general',
            'confidence': 0.1,
            'suggestions': self.get_general_suggestions(subject),
            'resources': [],
            'question_type': 'general'
        }
    
    def generate_suggestions(self, subject: str, current_topic: str, 
                           relevant_content: List[Dict]) -> List[str]:
        """Generar sugerencias de temas relacionados"""
        suggestions = []
        
        # Sugerencias basadas en contenido relevante
        for content in relevant_content[1:4]:  # Tomar hasta 3 temas relacionados
            if content['topic'] != current_topic:
                suggestions.append(f"¬øQu√© es {content['topic']}?")
        
        # Sugerencias espec√≠ficas por materia
        subject_suggestions = {
            'matematicas': [
                "¬øC√≥mo resolver ecuaciones cuadr√°ticas?",
                "¬øQu√© son las funciones lineales?",
                "¬øC√≥mo calcular el √°rea de figuras geom√©tricas?",
                "¬øQu√© es la trigonometr√≠a b√°sica?"
            ],
            'fisica': [
                "¬øC√≥mo calcular la velocidad y aceleraci√≥n?",
                "¬øQu√© son las ondas y el sonido?",
                "¬øC√≥mo funciona la electricidad?",
                "¬øQu√© es la energ√≠a y sus transformaciones?"
            ],
            'quimica': [
                "¬øC√≥mo balancear ecuaciones qu√≠micas?",
                "¬øQu√© son los √°cidos y bases?",
                "¬øC√≥mo funciona la estructura at√≥mica?",
                "¬øQu√© son las reacciones qu√≠micas?"
            ],
            'biologia': [
                "¬øC√≥mo funciona la respiraci√≥n celular?",
                "¬øQu√© es la gen√©tica b√°sica?",
                "¬øC√≥mo funcionan los ecosistemas?",
                "¬øQu√© es la evoluci√≥n?"
            ]
        }
        
        if subject in subject_suggestions:
            suggestions.extend(random.sample(subject_suggestions[subject], 2))
        
        return suggestions[:5]  # M√°ximo 5 sugerencias
    
    def get_general_suggestions(self, subject: str) -> List[str]:
        """Obtener sugerencias generales por materia"""
        general_suggestions = {
            'matematicas': [
                "¬øC√≥mo resolver ecuaciones lineales?",
                "¬øQu√© es el teorema de Pit√°goras?",
                "¬øC√≥mo graficar funciones?"
            ],
            'fisica': [
                "¬øCu√°les son las leyes de Newton?",
                "¬øQu√© es la energ√≠a cin√©tica?",
                "¬øC√≥mo funciona la gravedad?"
            ],
            'quimica': [
                "¬øC√≥mo est√° organizada la tabla peri√≥dica?",
                "¬øQu√© son los enlaces qu√≠micos?",
                "¬øC√≥mo se forman los compuestos?"
            ],
            'biologia': [
                "¬øQu√© es una c√©lula?",
                "¬øC√≥mo funciona la fotos√≠ntesis?",
                "¬øQu√© es el ADN?"
            ],
            'general': [
                "¬øSobre qu√© materia te gustar√≠a aprender?",
                "¬øNecesitas ayuda con matem√°ticas, f√≠sica, qu√≠mica o biolog√≠a?",
                "¬øQu√© tema espec√≠fico te interesa?"
            ]
        }
        
        return general_suggestions.get(subject, general_suggestions['general'])
    
    def generate_resources(self, subject: str, topic: str) -> List[Dict]:
        """Generar recursos educativos adicionales"""
        resources = []
        
        # Recursos por materia
        subject_resources = {
            'matematicas': [
                {
                    'type': 'video',
                    'title': 'Khan Academy - Matem√°ticas',
                    'description': 'Videos explicativos paso a paso',
                    'url': 'https://es.khanacademy.org/math'
                },
                {
                    'type': 'ejercicios',
                    'title': 'Ejercicios de pr√°ctica',
                    'description': 'Problemas resueltos y propuestos',
                    'url': '#'
                }
            ],
            'fisica': [
                {
                    'type': 'simulacion',
                    'title': 'PhET Simulaciones',
                    'description': 'Simulaciones interactivas de f√≠sica',
                    'url': 'https://phet.colorado.edu/es/'
                }
            ],
            'quimica': [
                {
                    'type': 'tabla',
                    'title': 'Tabla Peri√≥dica Interactiva',
                    'description': 'Explora los elementos qu√≠micos',
                    'url': '#'
                }
            ],
            'biologia': [
                {
                    'type': 'diagrama',
                    'title': 'Atlas de Biolog√≠a',
                    'description': 'Diagramas y esquemas biol√≥gicos',
                    'url': '#'
                }
            ]
        }
        
        if subject in subject_resources:
            resources = subject_resources[subject]
        
        return resources
    
    def adjust_response_level(self, response: str, difficulty_level: str) -> str:
        """Ajustar el nivel de la respuesta seg√∫n la dificultad"""
        if difficulty_level == 'basic':
            # Simplificar lenguaje
            response = response.replace('establecer', 'decir')
            response = response.replace('determinar', 'encontrar')
            response = response.replace('constituir', 'formar')
        elif difficulty_level == 'advanced':
            # Agregar m√°s detalles t√©cnicos
            response += "\n\nüî¨ Nota avanzada: Este concepto se relaciona con principios m√°s complejos que puedes explorar en niveles superiores."
        
        return response